#!/usr/bin/env python
import sys
import re

auto_names = []
name_vals = {}
val_names = {}

def die(errmsg):
    print >>sys.stderr, errmsg
    exit(1)

re_name = re.compile(r"[A-Z][A-Z0-9_]*")

def check_valid(name):
    m = re_name.match(name)
    (m and m.end() == len(name)) or die("invalid name: %s" % name)

def parse_val(val):
    # TODO: handle octal (023), hex (0xdeadbeef), etc.
    return int(val)

def mkbranch(name, val=None):
    # we ignore nargs for now.
    check_valid(name)
    if name in auto_names or name in name_vals:
        die("already defined: %s", name)
    if val is None:
        auto_names.append(name)
    else:
        intval = parse_val(val)
        intval < maxval or die("value too large: %s", val)
        if intval in val_names:
            die("already defined branch with value: %s", val)
        name_vals[name] = val
        val_names[intval] = name

def assign_name_vals():
    nextval = 0
    for name in auto_names:
        while nextval in val_names:
            nextval += 1
        nextval < maxval or die("value too large: %s", nextval)
        name_vals[name] = nextval
        val_names[nextval] = name
        nextval += 1

def fixname(name):
    return "RVM_%s_%s" % (kind.upper(), name)

def print_header():
    print """/* THIS HEADER IS AUTOGENERATED. DO NOT EDIT. */
#ifndef _ENUM_{0}_
#define _ENUM_{0}_
""".format(kind.upper())

    maxnamelen = max(len(fixname(n)) for n in name_vals)
    maxvallen = max(len(str(n)) for n in val_names)

    for intval in sorted(val_names):
        name = val_names[intval]
        val = name_vals[name]
        print ("#define %-*s ((rvm_%s_t) %*s)" %
               (maxnamelen, fixname(name), kind, maxvallen, val))

    print "\n#endif"


if __name__ != "__main__":
    die("what are you smoking?! this is a script, not a module!")

(_, kind, maxval) = sys.argv

for line in sys.stdin:
    parts = line.split()
    if not parts or parts[0].startswith("#"):
        # ignore empty lines and lines starting with "#"
        continue
    mkbranch(*parts)
assign_name_vals()
print_header()
