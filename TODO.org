* NOW

# Figure out how calling into eris from C will work

Problem: implementation of all instructions is locked inside eris_run_vm.

Solution: eris_vm_run's interface, instead of "run this state", is "please call
this procedure with these args".

# Related: figure out how calling eris funcs from builtins (eg. seq-tabulate) will work

Simplest solution is to require such things to actually be C functions. This
kinda sucks - overhead for calling into C and back into eris involves a setjmp
and bunch of other stuff.

# Figure out how setjmp logic for C calls will work

I can either have a setjmp() on each call into eris from C, or on each call out
to C from eris.

Which is more common:

- calls to eris from C? then want setjmp on calls into C
  perhaps not done in a tight loop?
  although it would be by eg. seq-tabulate!

- calls to C from eris?
  common if using eris as control language with C-implemented primitives
  could occur in a tight loop

# Figure out how stack unwinding for exceptions will work

Currently I am passing T,F pairs to all funcs that could raise exceptions. This
works for GC cycles, but *not* for exceptions; stack unwinding needs to be done
in the main VM loop.

One slightly hackish solution is to have a setjmp() at the beginning of each vm
loop, and use that to do stack unwinding etc. This... might be OK? Not sure.

Another solution is two interacting code paths: one in the VM loop and one for C
calls. Anything that could error has to go in the main VM loop proper, not just
in a function inlined into it. This is complicated but maybe the Right Way to do
it.

THINK CAREFULLY ABOUT THIS

* SOON
- Figure out and *write down* a description of the bootstrapping process.

- Figure out how GC is gonna work & make it work.

- Figure out how exceptions are gonna work.

- Figure out how we're gonna deal with return stack overflows. Can we statically
  guarantee the return stack won't overflow before the register stack?

* EVENTUALLY
# Empirical performance questions
- Would representing nil as NULL speed us up? Would need to change
  representation of "undefined" in cells.
