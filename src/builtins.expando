/* This is an expando-style header. It is meant to be included with the BUILTIN
 * defined to something that will do a useful thing for each builtin definition.
 * As such, it has no include guards.
 *
 * BUILTIN(name, num_args, variadic, ...)
 *
 * - name: the name of the builtin. all caps, suitable for use in a macro name.
 *
 * - num_args: integer literal for the number of arguments the builtin takes. if
 *   the builtin is variadic, this is the _minimum_ number of arguments.
 *
 * - variadic: "true" if the builtin is variadic, "false" otherwise.
 *
 * - __VA_ARGS__: code that evaluates the builtin. expects the following macros
 *   to be defined:
 *
 *   - NARGS: number of arguments
 *   - ARG(i): ith argument
 *   - DEST: location to put the result value in.
 *   - ARITY_ERROR(): signals an arity error.
 *   - TYPE_ERROR(): signals a type error.
 *   - THREAD: pointer to the current eris_thread_t
 *   - UNIMPLEMENTED: signals the builtin is unimplemented.
 *
 *   TODO: TYPE_ERROR (and maybe ARITY_ERROR?) should take args to indicate what
 *   failed.
 *
 *   Headers that must be included for code to work:
 *   - vm_util.h
 */

#ifndef BUILTIN
#error "builtins.expando included with BUILTIN undefined"
#endif

/* Sequences */
/* (SEQ-MAKE x0 x1 ... xn) == `(,x0 ,x1 ... ,xn) */
BUILTIN(SEQ_MAKE, 0, true, UNIMPLEMENTED)

/* (SEQ-TABULATE n f) == (SEQ-MAKE (f 0) (f 1) ... (f (- n 1))) */
BUILTIN(SEQ_TABULATE, 2, false, UNIMPLEMENTED)

/* (SEQ-NTH n s) ==> `n`th element of `s` */
BUILTIN(SEQ_NTH, 2, false, UNIMPLEMENTED)

/* (SEQ-LENGTH s) ==> length of `s` */
BUILTIN(SEQ_LENGTH, 1, false, UNIMPLEMENTED)

/* Strings */
BUILTIN(STR_CAT, 0, true, UNIMPLEMENTED) /* variadic */
BUILTIN(STR_EQ, 2, false, UNIMPLEMENTED)
BUILTIN(STR_CMP, 2, false, UNIMPLEMENTED)
BUILTIN(STR_SUBSTR, 3, false, UNIMPLEMENTED)
BUILTIN(INTERN, 1, false, UNIMPLEMENTED)

/* Equality, comparison, other tests */
/* Should equality tests be variadic? */
/* fastest & crudest equality test */
BUILTIN(RAW_EQ, 2, false, UNIMPLEMENTED)
BUILTIN(NUM_EQ, 2, false, UNIMPLEMENTED)
BUILTIN(SYM_EQ, 2, false, UNIMPLEMENTED)
BUILTIN(IS_NIL, 1, false,
        DEST = eris_make_bool(THREAD->vm, ARG(0) == eris_nil);
    )

/* Miscellany. */
BUILTIN(APPLY, 2, true, UNIMPLEMENTED)   /* variadic */


/* Arithmetic */
/* add, sub, mul, div all variadic */
BUILTIN(ADD, 0, true, UNIMPLEMENTED)
BUILTIN(SUB, 1, true, UNIMPLEMENTED)     /* with 1 arg, negates */
BUILTIN(MUL, 0, true, UNIMPLEMENTED)
BUILTIN(DIV, 1, true, UNIMPLEMENTED)     /* with 1 arg, inverts */

BUILTIN(MOD, 2, false, UNIMPLEMENTED)
BUILTIN(MIN, 1, true, UNIMPLEMENTED)     /* variadic, >0 args */
BUILTIN(MAX, 1, true, UNIMPLEMENTED)     /* variadic, >0 args */
BUILTIN(ABS, 1, false, UNIMPLEMENTED)

BUILTIN(SQRT, 1, false, UNIMPLEMENTED)

/* exp is 2adic (exp b n) --> b^n
 *     or 1adic   (exp n) --> e^n */
BUILTIN(EXP, 1, true, UNIMPLEMENTED)

/* log is 2adic (log b n) --> log_b(n)
 *     or 1adic   (log n) --> log_e(n)
 */
BUILTIN(LOG, 1, true, UNIMPLEMENTED)

/* I do NOT (yet?) guarantee these behave as in r5rs.
 * TODO: think about semantics. */
BUILTIN(EXACT_TO_INEXACT, 1, false, UNIMPLEMENTED)
BUILTIN(INEXACT_TO_EXACT, 1, false, UNIMPLEMENTED)

/* These SHOULD behave as in r5rs. */
BUILTIN(FLOOR, 1, false, UNIMPLEMENTED)
BUILTIN(CEILING, 1, false, UNIMPLEMENTED)
/* TODO: should these take precisions to truncate/round to? */
BUILTIN(TRUNCATE, 1, false, UNIMPLEMENTED)
BUILTIN(ROUND, 1, false, UNIMPLEMENTED)

/* Bitwise ops. Produce errors on input that isn't integral. */
BUILTIN(BIT_AND, 1, true, UNIMPLEMENTED)
BUILTIN(BIT_OR, 1, true, UNIMPLEMENTED)
BUILTIN(BIT_XOR, 1, true, UNIMPLEMENTED)
BUILTIN(BIT_NOT, 1, false, UNIMPLEMENTED)
/* Right-shifts are always arithmetic, not logical, since we simulate
 * unlimited-precision arithmetic.
 */
BUILTIN(BIT_SHR, 2, false, UNIMPLEMENTED)
BUILTIN(BIT_SHL, 2, false, UNIMPLEMENTED)
