#!/usr/bin/env python
import sys
import re

auto_ops = []
op_codes = {}
code_ops = {}

def die(errmsg):
    print >>sys.stderr, errmsg
    exit(1)

re_op_name = re.compile(r"[A-Z][A-Z0-9_]*")

def check_valid(name):
    m = re_op_name.match(name)
    (m and m.end() == len(name)) or die("invalid op name: %s" % name)

def parse_code(code):
    # TODO: handle octal (023), hex (0xdeadbeef), etc.
    return int(code)

def mkop(name, code=None):
    # we ignore nargs for now.
    check_valid(name)
    if name in auto_ops or name in op_codes:
        die("already defined op: %s", name)
    if code is None:
        auto_ops.append(name)
    else:
        intcode = parse_code(code)
        intcode < 256 or die("op code too large: %s", code)
        if intcode in code_ops:
            die("already defined op with code: %s", code)
        op_codes[name] = code
        code_ops[intcode] = name

def assign_op_codes():
    nextval = 0
    for name in auto_ops:
        while nextval in code_ops:
            nextval += 1
        nextval < 256 or die("op code too large: %s", nextval)
        op_codes[name] = nextval
        code_ops[nextval] = name
        nextval += 1

def fixname(name):
    return "RVM_OP_" + name

def print_opcodes_h():
    maxnamelen = max(len(fixname(n)) for n in op_codes)
    maxcodelen = max(len(str(n)) for n in code_ops)
    print "\n".join([
            "/* THIS HEADER IS AUTOGENERATED. DO NOT EDIT.",
            " * Internal header. do not include in clients of RVM. */",
            "#ifndef _OPCODES_H_",
            "#define _OPCODES_H_"])
    print
    for intcode in sorted(code_ops):
        name = code_ops[intcode]
        code = op_codes[name]
        print ("#define %-*s ((rvm_opcode_t) %*s)" %
               (maxnamelen, fixname(name), maxcodelen, code))
    print "\n#endif"

if __name__ != "__main__":
    die("what are you smoking?! this is a script, not a module!")

for line in sys.stdin:
    parts = line.split()
    if not parts or parts[0].startswith("#"):
        # ignore empty lines and lines starting with "#"
        continue
    mkop(*parts)
assign_op_codes()
print_opcodes_h()
